# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/99_utils.plot.ipynb.

# %% auto 0
__all__ = ['fig', 'func_show', 'figsz', 'get_grid']

# %% ../../nbs/99_utils.plot.ipynb 3
from ..basics import *

# %% ../../nbs/99_utils.plot.ipynb 4
def func_show(f: callable, ax: plt.Axes=None, bounds: tuple[float]=(-2,2), title: str=""):
    "Draw 1D function `f`."
    if ax is None: ax = plt.subplots(figsize=(3,2))[1]
    xs = np.linspace(*bounds, 100)
    ax.plot(xs, f(xs))
    ax.set_xlabel('x');ax.set_ylabel('y');ax.set_title(title)

# %% ../../nbs/99_utils.plot.ipynb 6
fig = plt.gcf(); _default_dpi = fig.dpi; plt.close(fig)

def figsz(sz: tuple[float], unit: str="cm") -> tuple[float]:
    "Converts the `sz` (width, height) in `unit` to inches."
    _cm = 1/2.54; _pixel = 1/_default_dpi
    w,h = sz
    if unit == "cm": return (w*_cm, h*_cm)
    elif unit == "pixel": return (w*_pixel, h*_pixel)
    else: raise ValueError(f'unit {unit} is invalid.')

# %% ../../nbs/99_utils.plot.ipynb 7
def get_grid(
    n:int, # Number of axes in the returned grid
    nrows:int=None, # Number of rows in the returned grid, defaulting to `int(math.sqrt(n))`
    ncols:int=None, # Number of columns in the returned grid, defaulting to `ceil(n/rows)` 
    figsize:tuple=None, # Width, height in inches of the returned figure
    double:bool=False, # Whether to double the number of columns and `n`
    title:str=None, # If passed, title set to the figure
    return_fig:bool=False, # Whether to return the figure created by `subplots`
    flatten:bool=True, # Whether to flatten the matplot axes such that they can be iterated over with a single loop
    **kwargs,
) -> (plt.Figure, plt.Axes): # Returns just `axs` by default, and (`fig`, `axs`) if `return_fig` is set to True
    "From `fastai`. Return a grid of `n` axes, `rows` by `cols`"
    if nrows:
        ncols = ncols or int(np.ceil(n/nrows))
    elif ncols:
        nrows = nrows or int(np.ceil(n/ncols))
    else:
        nrows = int(np.sqrt(n))
        ncols = int(np.ceil(n/nrows))
    if double: ncols*=2 ; n*=2
    fig,axs = subplots(nrows, ncols, figsize=figsize, **kwargs)
    if flatten: axs = [ax if i<n else ax.set_axis_off() for i, ax in enumerate(axs.flatten())][:n]
    if title is not None: fig.suptitle(title, weight='bold', size=14)
    return (fig,axs) if return_fig else axs
