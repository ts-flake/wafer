# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/wafer',
                'doc_host': 'https://ts-flake.github.io',
                'git_url': 'https://github.com/ts-flake/wafer',
                'lib_path': 'wafer'},
  'syms': { 'wafer.basics': {},
            'wafer.callback.progress': { 'wafer.callback.progress.GradFlowCB': ( 'callback.progress.html#gradflowcb',
                                                                                 'wafer/callback/progress.py'),
                                         'wafer.callback.progress.GradFlowCB.__init__': ( 'callback.progress.html#gradflowcb.__init__',
                                                                                          'wafer/callback/progress.py'),
                                         'wafer.callback.progress.GradFlowCB._clear_ax_data': ( 'callback.progress.html#gradflowcb._clear_ax_data',
                                                                                                'wafer/callback/progress.py'),
                                         'wafer.callback.progress.GradFlowCB._update_graph': ( 'callback.progress.html#gradflowcb._update_graph',
                                                                                               'wafer/callback/progress.py'),
                                         'wafer.callback.progress.GradFlowCB.after_fit': ( 'callback.progress.html#gradflowcb.after_fit',
                                                                                           'wafer/callback/progress.py'),
                                         'wafer.callback.progress.GradFlowCB.before_epoch': ( 'callback.progress.html#gradflowcb.before_epoch',
                                                                                              'wafer/callback/progress.py'),
                                         'wafer.callback.progress.GradFlowCB.before_fit': ( 'callback.progress.html#gradflowcb.before_fit',
                                                                                            'wafer/callback/progress.py'),
                                         'wafer.callback.progress.GradFlowCB.before_step': ( 'callback.progress.html#gradflowcb.before_step',
                                                                                             'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB': ( 'callback.progress.html#statscb',
                                                                              'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB.__init__': ( 'callback.progress.html#statscb.__init__',
                                                                                       'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB._flatten_tuple': ( 'callback.progress.html#statscb._flatten_tuple',
                                                                                             'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB._register_hooks': ( 'callback.progress.html#statscb._register_hooks',
                                                                                              'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB._remove_hooks': ( 'callback.progress.html#statscb._remove_hooks',
                                                                                            'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB.after_batch': ( 'callback.progress.html#statscb.after_batch',
                                                                                          'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB.before_batch': ( 'callback.progress.html#statscb.before_batch',
                                                                                           'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB.before_fit': ( 'callback.progress.html#statscb.before_fit',
                                                                                         'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB.before_step': ( 'callback.progress.html#statscb.before_step',
                                                                                          'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB.hook_fn': ( 'callback.progress.html#statscb.hook_fn',
                                                                                      'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB.hook_multi_ouput': ( 'callback.progress.html#statscb.hook_multi_ouput',
                                                                                               'wafer/callback/progress.py'),
                                         'wafer.callback.progress.StatsCB.plot_layer': ( 'callback.progress.html#statscb.plot_layer',
                                                                                         'wafer/callback/progress.py'),
                                         'wafer.callback.progress.plot_grad_flow': ( 'callback.progress.html#plot_grad_flow',
                                                                                     'wafer/callback/progress.py'),
                                         'wafer.callback.progress.plot_grad_flow_box': ( 'callback.progress.html#plot_grad_flow_box',
                                                                                         'wafer/callback/progress.py')},
            'wafer.core': { 'wafer.core.BaseLogCB': ('core.html#baselogcb', 'wafer/core.py'),
                            'wafer.core.BaseLogCB.__init__': ('core.html#baselogcb.__init__', 'wafer/core.py'),
                            'wafer.core.BaseLogCB.after_epoch': ('core.html#baselogcb.after_epoch', 'wafer/core.py'),
                            'wafer.core.BaseLogCB.all_names': ('core.html#baselogcb.all_names', 'wafer/core.py'),
                            'wafer.core.BaseLogCB.before_epoch': ('core.html#baselogcb.before_epoch', 'wafer/core.py'),
                            'wafer.core.BaseLogCB.before_fit': ('core.html#baselogcb.before_fit', 'wafer/core.py'),
                            'wafer.core.BaseLogCB.log_df': ('core.html#baselogcb.log_df', 'wafer/core.py'),
                            'wafer.core.BatchXfmCB': ('core.html#batchxfmcb', 'wafer/core.py'),
                            'wafer.core.BatchXfmCB.__init__': ('core.html#batchxfmcb.__init__', 'wafer/core.py'),
                            'wafer.core.BatchXfmCB.before_batch': ('core.html#batchxfmcb.before_batch', 'wafer/core.py'),
                            'wafer.core.Callback': ('core.html#callback', 'wafer/core.py'),
                            'wafer.core.ClipGradCB': ('core.html#clipgradcb', 'wafer/core.py'),
                            'wafer.core.ClipGradCB.__init__': ('core.html#clipgradcb.__init__', 'wafer/core.py'),
                            'wafer.core.ClipGradCB.before_step': ('core.html#clipgradcb.before_step', 'wafer/core.py'),
                            'wafer.core.Dataloader': ('core.html#dataloader', 'wafer/core.py'),
                            'wafer.core.Dataloader.__init__': ('core.html#dataloader.__init__', 'wafer/core.py'),
                            'wafer.core.Dataloader.__iter__': ('core.html#dataloader.__iter__', 'wafer/core.py'),
                            'wafer.core.Dataloader.one_batch': ('core.html#dataloader.one_batch', 'wafer/core.py'),
                            'wafer.core.DeviceCB': ('core.html#devicecb', 'wafer/core.py'),
                            'wafer.core.DeviceCB.before_batch': ('core.html#devicecb.before_batch', 'wafer/core.py'),
                            'wafer.core.DeviceCB.before_fit': ('core.html#devicecb.before_fit', 'wafer/core.py'),
                            'wafer.core.Hook': ('core.html#hook', 'wafer/core.py'),
                            'wafer.core.Hook.__enter__': ('core.html#hook.__enter__', 'wafer/core.py'),
                            'wafer.core.Hook.__exit__': ('core.html#hook.__exit__', 'wafer/core.py'),
                            'wafer.core.Hook.__init__': ('core.html#hook.__init__', 'wafer/core.py'),
                            'wafer.core.Hook.hook_func': ('core.html#hook.hook_func', 'wafer/core.py'),
                            'wafer.core.Hook.remove': ('core.html#hook.remove', 'wafer/core.py'),
                            'wafer.core.Hooks': ('core.html#hooks', 'wafer/core.py'),
                            'wafer.core.Hooks.__enter__': ('core.html#hooks.__enter__', 'wafer/core.py'),
                            'wafer.core.Hooks.__exit__': ('core.html#hooks.__exit__', 'wafer/core.py'),
                            'wafer.core.Hooks.__getitem__': ('core.html#hooks.__getitem__', 'wafer/core.py'),
                            'wafer.core.Hooks.__init__': ('core.html#hooks.__init__', 'wafer/core.py'),
                            'wafer.core.Hooks.__iter__': ('core.html#hooks.__iter__', 'wafer/core.py'),
                            'wafer.core.Hooks.__len__': ('core.html#hooks.__len__', 'wafer/core.py'),
                            'wafer.core.Hooks.remove': ('core.html#hooks.remove', 'wafer/core.py'),
                            'wafer.core.Hooks.stored': ('core.html#hooks.stored', 'wafer/core.py'),
                            'wafer.core.LRCB': ('core.html#lrcb', 'wafer/core.py'),
                            'wafer.core.LRCB.__init__': ('core.html#lrcb.__init__', 'wafer/core.py'),
                            'wafer.core.LRCB.after_step': ('core.html#lrcb.after_step', 'wafer/core.py'),
                            'wafer.core.Learner': ('core.html#learner', 'wafer/core.py'),
                            'wafer.core.Learner.__call__': ('core.html#learner.__call__', 'wafer/core.py'),
                            'wafer.core.Learner.__init__': ('core.html#learner.__init__', 'wafer/core.py'),
                            'wafer.core.Learner.do_one_batch': ('core.html#learner.do_one_batch', 'wafer/core.py'),
                            'wafer.core.Learner.do_one_epoch': ('core.html#learner.do_one_epoch', 'wafer/core.py'),
                            'wafer.core.Learner.fit': ('core.html#learner.fit', 'wafer/core.py'),
                            'wafer.core.Learner.plot_loss': ('core.html#learner.plot_loss', 'wafer/core.py'),
                            'wafer.core.Learner.predict': ('core.html#learner.predict', 'wafer/core.py'),
                            'wafer.core.Learner.predict_batch': ('core.html#learner.predict_batch', 'wafer/core.py'),
                            'wafer.core.Learner.training': ('core.html#learner.training', 'wafer/core.py'),
                            'wafer.core.MetricCB': ('core.html#metriccb', 'wafer/core.py'),
                            'wafer.core.MetricCB.__init__': ('core.html#metriccb.__init__', 'wafer/core.py'),
                            'wafer.core.MetricCB.after_epoch': ('core.html#metriccb.after_epoch', 'wafer/core.py'),
                            'wafer.core.MetricCB.before_epoch': ('core.html#metriccb.before_epoch', 'wafer/core.py'),
                            'wafer.core.MetricCB.before_fit': ('core.html#metriccb.before_fit', 'wafer/core.py'),
                            'wafer.core.MetricCB.before_loss': ('core.html#metriccb.before_loss', 'wafer/core.py'),
                            'wafer.core.MetricCB.log_df': ('core.html#metriccb.log_df', 'wafer/core.py'),
                            'wafer.core.MetricCB.reset': ('core.html#metriccb.reset', 'wafer/core.py'),
                            'wafer.core.ProgressCB': ('core.html#progresscb', 'wafer/core.py'),
                            'wafer.core.ProgressCB.after_epoch': ('core.html#progresscb.after_epoch', 'wafer/core.py'),
                            'wafer.core.ProgressCB.after_fit': ('core.html#progresscb.after_fit', 'wafer/core.py'),
                            'wafer.core.ProgressCB.after_loss': ('core.html#progresscb.after_loss', 'wafer/core.py'),
                            'wafer.core.ProgressCB.before_backward': ('core.html#progresscb.before_backward', 'wafer/core.py'),
                            'wafer.core.ProgressCB.before_epoch': ('core.html#progresscb.before_epoch', 'wafer/core.py'),
                            'wafer.core.ProgressCB.before_fit': ('core.html#progresscb.before_fit', 'wafer/core.py'),
                            'wafer.core.Scaler': ('core.html#scaler', 'wafer/core.py'),
                            'wafer.core.Scaler.__init__': ('core.html#scaler.__init__', 'wafer/core.py'),
                            'wafer.core.Scaler.inv_xfm': ('core.html#scaler.inv_xfm', 'wafer/core.py'),
                            'wafer.core.Scaler.xfm': ('core.html#scaler.xfm', 'wafer/core.py'),
                            'wafer.core.has_children': ('core.html#has_children', 'wafer/core.py'),
                            'wafer.core.has_params': ('core.html#has_params', 'wafer/core.py'),
                            'wafer.core.mk_dls_from_ds': ('core.html#mk_dls_from_ds', 'wafer/core.py'),
                            'wafer.core.mk_dls_from_hub': ('core.html#mk_dls_from_hub', 'wafer/core.py'),
                            'wafer.core.to_cpu': ('core.html#to_cpu', 'wafer/core.py'),
                            'wafer.core.to_detach': ('core.html#to_detach', 'wafer/core.py'),
                            'wafer.core.to_device': ('core.html#to_device', 'wafer/core.py')},
            'wafer.imports': {},
            'wafer.init': { 'wafer.init.default_init': ('init.html#default_init', 'wafer/init.py'),
                            'wafer.init.lambda_init': ('init.html#lambda_init', 'wafer/init.py'),
                            'wafer.init.lsuv_init': ('init.html#lsuv_init', 'wafer/init.py'),
                            'wafer.init.rai_init': ('init.html#rai_init', 'wafer/init.py')},
            'wafer.recurrent.models': {},
            'wafer.recurrent.utils': { 'wafer.recurrent.utils.dynshow': ('recurrent.utils.html#dynshow', 'wafer/recurrent/utils.py'),
                                       'wafer.recurrent.utils.eigen_show': ('recurrent.utils.html#eigen_show', 'wafer/recurrent/utils.py'),
                                       'wafer.recurrent.utils.mk_sequential_MNIST_dls': ( 'recurrent.utils.html#mk_sequential_mnist_dls',
                                                                                          'wafer/recurrent/utils.py'),
                                       'wafer.recurrent.utils.stream_plot': ( 'recurrent.utils.html#stream_plot',
                                                                              'wafer/recurrent/utils.py')},
            'wafer.utils.plot': { 'wafer.utils.plot.figsz': ('utils.plot.html#figsz', 'wafer/utils/plot.py'),
                                  'wafer.utils.plot.func_show': ('utils.plot.html#func_show', 'wafer/utils/plot.py'),
                                  'wafer.utils.plot.get_grid': ('utils.plot.html#get_grid', 'wafer/utils/plot.py')}}}
